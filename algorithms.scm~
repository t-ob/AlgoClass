(define merge
  (lambda (list-left list-right)
    (cond ((null? list-left) list-right)
          ((null? list-right) list-left)
          ((<= (car list-left) (car list-right))
           (cons (car list-left)
                 (merge (cdr list-left) list-right)))
          ((<= (car list-right) (car list-left))
           (cons (car list-right)
                 (merge list-left (cdr list-right)))))))

(define split
  (lambda (list list1 list2)
    (if (null? list)
        (cons list1 list2)
        (split (cdr list) list2 (cons (car list) list1)))))

(define merge-sort
  (lambda (list)
    (cond ((or (null? list) (null? (cdr list))) list)
          (else (merge (merge-sort (car (split list '() '())))
                       (merge-sort (cdr (split list '() '()))))))))

input
(merge-sort input)


(merge-sort '(1 10 3 4 6 2 5 5))

(find-system-path 'exec-file)

(define in (open-input-file
             (string->path "/Users/tomobrien/Dropbox/AlgoClass/test.txt")))

(string->number "2")
(display in)

(close-input-port in)

(define merge-and-count
  (lambda (list-left list-right)
    (cond ((null? list-left) list-right)
          ((null? list-right) list-left)
          ((<= (car list-left) (car list-right))
           (cons (car list-left)
                 (merge (cdr list-left) list-right)))
          ((<= (car list-right) (car list-left))
           (cons (car list-right)
                 (merge list-left (cdr list-right)))))))

(cons (list 1 2 3 4) '())

(define merge-iter
  (lambda (left right total)
    (cond ((null? left) (append total right))
          ((null? right) (append total left))
          ((<= (car left) (car right))
           (merge-iter (cdr left) right (append total (list (car left)))))
          ((< (car right) (car left))
           (merge-iter left (cdr right) (append total (list (car right))))))))

(define merge-iter-and-count
  (lambda (left right total count)
    (cond ((null? left) (cons (append total right) count))
          ((null? right) (cons (append total left) count))
          ((<= (car left) (car right))
           (merge-iter-and-count (cdr left) right
                                 (append total (list (car left))) count))
          ((< (car right) (car left))
           (merge-iter-and-count left (cdr right)
                                 (append total (list (car right)))
                                 (+ count (length left)))))))

(merge-iter-and-count '(1 3 5) '(2 4 6) '() 0)
(merge-iter-and-count '(1 3 7) '(2 4 5 6) '() 0)

(define count-inversions
  (lambda (list)
    (if (or (null? list) (null? (cdr list)))
        0
        (let ((split-list (split-iter list (/ (length list) 2) 1 '() )))
          (+ (count-inversions (car split-list))
             (count-inversions (cdr split-list))
             (cdr (merge-iter-and-count (car (merge-sort split-list))
                                        (cdr (merge-sort split-list))
                                        '() 0)))))))

(count-inversions '(1 2 3 4 5 6))
(count-inversions '(6 5 4 3 2 1))

(define test-list  '(6 5 4 3 2 1))
(define split-test (split-iter test-list (/ (length test-list) 2) 1 '()))

(split-iter '(6 5 4) (/ 3 2) 1 '())
(merge-iter-and-count '(6) '(4 5) '() 0)
  

(car (merge-iter-and-count '(1 3 7) '(2 4 5 6) '() 0))
(cdr (merge-iter-and-count '(1 3 7) '(2 4 5 6) '() 0))

(length '())

(define split-iter
  (lambda (inlist k count result)
    (cond ((null? (cdr inlist)) (cons inlist '()))
          ((> count k) (cons result inlist))
          (else (split-iter (cdr inlist) k (+ count 1)
                            (append result (list (car inlist))))))))

(split-iter '(1 3 6 2 5 4 2 4 7) (/ 9 2) 0 '())
(split-iter '(1) (/ 1 2) 0 '())

(cons '(1) '())

(split '(1 3 6 2 5 4 2 4 7) '())

(append '() (list 7))

(take '(1 2 3 4 5 6 7 8) (floor (/ 9 2)))

(define merge-sort
  (lambda (list)

    (let ((left take list (floor (/ (length list) 2)))
          (right drop list (floor (/ (length list) 2))))
      )))

(define merge-iter
  (lambda (left right result)
    (cond ((null? left) (cons right result))
          ((null? right) (cons left result))
          ((<= (car left) (car right))
           (merge-iter (cdr left) right (cons (car left) result)))
          (else
           (merge-iter left (cdr right) (cons (car right) result))))))

(define merge
  (lambda (left right)
    (merge-iter left right '())))

(merge '(1 4 5 6) '(3 4 8 9))
(cons '(1 2 3 4 5) '())

(define merge-sort
  (lambda (list)
    (if (or (null? list) (null? (cdr list)))
        list
        (let ((left (take list (floor (/ (length list) 2))))
              (right (drop list (floor (/ (length list) 2)))))
          (merge (merge-sort left) (merge-sort right))))))

(define merge-sort
  (lambda (list)
    (define half (floor (/ (length list) 2)))
    (if (or (null? list) (null? (cdr list)))
        list
        (merge (merge-sort (take list half))
               (merge-sort (drop list half))))))

(merge-sort '(3 6 1 3 5 9 8 3 6 7))

(define count-test
  (lambda (list)
    (define half (floor (/ (length list) 2)))
    (if (or (null? list) (null? (cdr list)))
        0
        (+ (count-test (take list half))
           (count-test (drop list half))
           (cdr (merge-iter-and-count (merge-sort (take list half))
                                      (merge-sort (drop list half))
                                      '() 0))))))

(define count-test-2
  (lambda (list)
    (define half (floor (/ (length list) 2)))
    (if (or (null? list) (null? (cdr list)))
        (cons list 0)
        (let ((B (count-test-2 (take list half)))
              (C (count-test-2 (drop list half))))
          (merge-and-count (merge-sort (car B)) (merge-sort (car C))
                           (+ (cdr B) (cdr C)))))))

(count-test-2 '(1 3 5 2 4 6))
(count-test-2 '(6 5 4 3 2 1))
(count-test-2 '(1 2 3 4 5 6))
(count-inversions '(6 5 4 3 2 1))

(define count-inversions
  (lambda (list)
    (cdr (count-test-2 list))))

(cdr (merge-iter-and-count '(4 5 6) '(1 2 3) '() 0))
(merge-iter-and-count '(4 5 6) '(1 2 3) '() 0)

(count-test '(3 6 1 3 5 9 8 3 6 7))

(define input
  (map (lambda (x) (string->number x))
       (file->lines "/Users/tomobrien/Dropbox/AlgoClass/IntegerArray.txt")))

(length input)
(count-inversions input)

(+ 2 2)

(/ (* 100000 99999) 2)

(define merge
  (lambda (list-left list-right)
    (cond ((null? list-left) list-right)
          ((null? list-right) list-left)
          ((<= (car list-left) (car list-right))
           (cons (car list-left)
                 (merge (cdr list-left) list-right)))
          ((<= (car list-right) (car list-left))
           (cons (car list-right)
                 (merge list-left (cdr list-right)))))))



(define merge-iter
  (lambda (left right merged count)
    (cond ((null? left) (cons (foldl cons merged right) count))
          ((null? right) (cons (foldl cons merged left) count))
          ((<= (car left) (car right))
           (merge-iter (cdr left) right (cons (car left) merged) count))
          (else
           (merge-iter left (cdr right) (cons (car right) merged)
                       (+ count (length left)))))))


(define merge-and-count
  (lambda (left right init)
    (let ((result (merge-iter left right '() init)))
      (cons (reverse (car result)) (cdr result)))))


(define count-inversions
  (lambda (list count)
    (cond ((or (null? list) (null? (cdr list))) (cons list count))
          (else
           (define half (floor (/ (length list) 2)))
           (let ((B (count-inversions (take list half) count))
                 (C (count-inversions (drop list half) count)))
             (merge-and-count (merge-sort (car B)) (merge-sort (car C))
                              (+ (cdr B) (cdr C))))))))

(cdr (count-inversions input 0))


(define merge-sort
  (lambda (list)
    (cond ((or (null? list) (null? (cdr list))) list)
          (else
           (let ((half (floor (/ (length list) 2))))
             (merge (merge-sort (take list half))
                    (merge-sort (drop list half))))))))

;;;;;;

(define modlist '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
                    21 22 23 24 25 26 27 28))

(map (lambda (x) (remainder (* x x x x x x x) 29)) modlist)

(remainder 541 53)

(define T
  (lambda (n)
    (if (= n 1)
        1
        (+ (* 2 (T (floor (/ n 2)))) n))))

(map T '(1 2 3 4 5 6 7 8 9 10))



